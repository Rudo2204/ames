#!/usr/bin/env bash
#
# OUTPUT_MONITOR must not be blank as default auto-selection does not work.
# get a list of devices with `python -m sounddevice`.
# use a value of "none" to use sounddevice's default device.
# shellcheck disable=SC2034
OUTPUT_MONITOR=""

take_screenshot_region() {
    # function to take a screenshot of a given screen region.
    # $1 is the geometry of the region from get_selection().
    # $2 is the output file name.
    local -r geom="$1"
    local -r path="$2"
    command screenshot "$path" -g "$geom"
}

take_screenshot_window() {
    # function to take a screenshot of the current window.
    # $1 is the output file name.
    local -r path="$1"
    local -r window="$(xdotool getactivewindow)"
    take_screenshot_region "$(xdotool getwindowgeometry "$window")" "$path"
}

record_function() {
    # function to record desktop audio.
    # $1 is the name of the output monitor.
    # $2 is the output file name.

    # the last function called here MUST be the call to
    # ffmpeg or some other program that does recording.
    # when -r is called again, the pid of the last function call is killed.
    local -r output="$1"
    local -r audio_file="$2"
    audio-record \
        --device "$output" \
        --channels 2 \
        --bitrate "$AUDIO_BITRATE" \
        "$audio_file" 1> /dev/null &
}

record_end() {
    # end recording.
    # the default implementation technically works but this is cleaner.
    # shellcheck disable=SC2154
    local -r audio_file="$(sed -n "1p" "$recording_toggle")"
    local -r pid="$(sed -n "2p" "$recording_toggle")"

    rm "$recording_toggle"
    kill -2 "$pid"

    while ( ps -p "$pid" &> /dev/null ); do
        true
    done

    local -r audio_backup="/tmp/ffmpeg-recording-audio-backup.$AUDIO_FORMAT"
    cp "$audio_file" "$audio_backup"
    # unlike the default implementation, we apply the volume filter here.
    ffmpeg -nostdin \
           -y \
           -loglevel error \
           -i "$audio_backup" \
           -af "volume=${AUDIO_VOLUME},silenceremove=1:0:-50dB" \
           "$audio_file" 1> /dev/null

    store_file "${audio_file}"
    update_sound "$(basename -- "$audio_file")"

    notify_record_stop
}

copied_text() {
    # get the contents of the clipboard.
    python -m pyclip paste
}

